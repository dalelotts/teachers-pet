[
  {
    "stem": "How many CMD commands can there be in a Dockerfile?",
    "answer": "There can only be one. If you list more than one CMD then only the last CMD will take effect. The main purpose of a CMD is to provide defaults for an executing container",
    "subject": "Containers: Docker"
  },
  {
    "stem": "In Docker, what is a 'layer'?",
    "answer": "Basically, a layer, or image layer is a change on an image, or an intermediate image. Every command you specify (FROM, RUN, COPY, etc.) in your Dockerfile causes the previous image to change, thus creating a new layer. You can think of it as staging changes when you're using git: You add a file's change, then another one, then another one...",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What are Docker images?",
    "answer": "Docker image is the source of Docker container. In other words, Docker images are used to create containers. When a user runs a Docker image, an instance of a container is created. These docker images can be deployed to any Docker environment.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is a Docker container?",
    "answer": "Docker containers include the application and all of its dependencies, but share the kernel with other containers, running as isolated processes in user space on the host operating system. Docker containers are not tied to any specific infrastructure: they run on any computer, on any infrastructure, and in any cloud.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is a Docker Registry?",
    "answer": "A docker Registry is a delivery and storage system for named Docker images. You can use `docker push` and `docker pull` to push and pull images from the registry. Companies usually have private docker registries. It's similar to `maven`, `npm`, and `artifactory`",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is a Docker Repository?",
    "answer": "A repository is a set of Docker images. It's shared by pushing it to a registry server. Different images in the repository can be labeled using tags. Think of it as being similar to a git repository",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is a tag/why do you use tags in Docker?",
    "answer": "A tag is a label applied to a Docker image in a repository and it's how various images in a repository are distinguished from one another. The tag can be almost anything you want, and it's best ot give it a meaningful, human-readable name",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is containerization?",
    "answer": "Usually, in the software development process, code developed on one machine might not work perfectly fine on any other machine because of the dependencies. This problem was solved by the containerization concept. So basically, an application that is being developed and deployed is bundled and wrapped together with all its configuration files and dependencies. This bundle is called a container. Now when you wish to run the application on another system, the container is deployed which will give a bug-free environment as all the dependencies and libraries are wrapped together. Most famous containerization environments are Docker and Kubernetes.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is Docker Compose used for?",
    "answer": "Compose is a tool for defining and running complex applications with Docker. With compose, you define a multi-container application in a single file, then spin your application up in a single command which does everything that needs to be done to get it running. The Compose file is a YAML file defining services, networks, and volumes. (The default path for a Compose file is './docker-compose.yml'.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is Docker?",
    "answer": "Docker is a containerization platform which packages your application and all its dependencies together in the form of containers so as to ensure that your application works seamlessly in any environment, be it development, test or production. Docker containers, wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries, etc. It wraps basically anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is in a Dockerfile?",
    "answer": "A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What is the difference between a Docker image and a Docker container?",
    "answer": "An instance of an image is called a container. You have an image, which is a set of layers. If you start this image, you have a running container of this image. You can have many running containers of the same image. You can see all your images with docker images whereas you can see your running containers with docker ps (and you can see all containers with docker ps -a). So a running instance of an image is a container.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "What type of applications - Stateless or Stateful - are more suitable for Docker Container?",
    "answer": "It is preferable to create Stateless application for Docker Container. We can create a container out of our application and take out the configurable state parameters from application. Now we can run same container in Production as well as QA environments with different parameters. This helps in reusing the same Image in different scenarios. Also a stateless application is much easier to scale with Docker Containers than a stateful application.",
    "subject": "Containers: Docker"
  },
  {
    "stem": "How is Kubernetes related to Docker?",
    "answer": "Kubernetes is a container orchestration system for Docker containers that is more extensive than Docker Swarm and is meant to coordinate clusters of nodes at scale in production in an efficient manner.",
    "subject": "Containers: Kubernetes"
  },
  {
    "stem": "In the context of Kubernetes, what is a container?",
    "answer": "Kubernetes provides users with a management system for container-based applications, which is a relief from controlling each individual container. Containers operate on host machines through a shared OS, but they remain isolated from each other to run applications -- unless the administrator connects them. As opposed to VMs, containers use a service such as Kubernetes rather than a hypervisor, and they also share the same OS rather than use individual guest OSes. Containers are often paired with microservices and a cloud platform or service.",
    "subject": "Containers: Kubernetes"
  },
  {
    "stem": "What is a cluster?",
    "answer": "Clusters enable high availability, load balancing and parallel processing. A cluster is a logical rather than physical unit. Organizations can include many servers or just a few in a cluster as the application's requirements demand.",
    "subject": "Containers: Kubernetes"
  },
  {
    "stem": "What is Container Orchestration?",
    "answer": "Consider a scenario where you have 5-6 microservices for an application. Now, these microservices are put in individual containers, but won’t be able to communicate without container orchestration. So, as orchestration means the amalgamation of all instruments playing together in harmony in music, similarly container orchestration means all the services in individual containers working together to fulfill the needs of a single server.",
    "subject": "Containers: Kubernetes"
  },
  {
    "stem": "What is Kubernetes?",
    "answer": "Kubernetes is an open-source container management tool which holds the responsibilities of container deployment, scaling & descaling of containers & load balancing. Being the Google’s brainchild, it offers excellent community and works brilliantly with all the cloud providers. So, we can say that Kubernetes is not a containerization platform, but it is a multi-container management solution.",
    "subject": "Containers: Kubernetes"
  },
  {
    "stem": "What is a downside of using Twitter Bootstrap?",
    "answer": "All websites look the same if no effort is put into customizations.",
    "subject": "Fullstack: Bootstrap"
  },
  {
    "stem": "What is responsive web design?",
    "answer": "Designing web pages that adjust to the size of the screen or device (e.g. mobile vs. desktop).",
    "subject": "Fullstack: Bootstrap"
  },
  {
    "stem": "What is the benefit of using Twitter Bootstrap?",
    "answer": "It allows styling a website very quickly and represents the XP value Simplicity.",
    "subject": "Fullstack: Bootstrap"
  },
  {
    "stem": "What is the result of following markup:<br><br><code>&lt;div class='row'&gt;<br>&nbsp;&nbsp;&lt;div class='col-md-6'&gt;Hello&lt;/div&gt;<br>&nbsp;&nbsp;&lt;div class='col-md-6'&gt;World&lt;/div&gt;<br>&lt;/div&gt;<code>",
    "answer": "Twitter Bootstrap's grid layout will show both divs as two equal sized sections. On larger screens next to each other, on smaller screens on top of each other.",
    "subject": "Fullstack: Bootstrap"
  },
  {
    "stem": "How are EDD and TDD similar?",
    "answer": "Both require an error to drive what to do next.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "How do you get query parameters in Express.js?",
    "answer": "req.params.parameterName or req.query[paramater-name]",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "How do you get URL parameters in Express.js?",
    "answer": "req.params.parameterName or req.params[paramater-name]",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "In what order are middleware functions called?",
    "answer": "In the order they are added",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "In what order are route functions called?",
    "answer": "In the order they are added",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: What is the responsibility of a controller in Express?",
    "answer": "Interpreting requests and preparing responses.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: What is the responsibility of a controller?",
    "answer": "Directing 'traffic' between view and model.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: What is the responsibility of a model?",
    "answer": "It contains the business logic and/or deals with persistance of data.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: What is the responsibility of a view?",
    "answer": "Displaying or presenting data to the user and reacting to user input or interactions.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: Where can I find the controllers in express?",
    "answer": "In the 'routes' directory.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: Where can I find the models in express?",
    "answer": "Potentially in a 'src', 'model' or 'services' directory. Express does not generate any model for you.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "MVC: Where can I find the views in express?",
    "answer": "In the 'views' directory.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What are core features of the Express.js framework?",
    "answer": "Use middleware to respond to HTTP Requests, Defines routing which maps to a URL and HTTP Method. Render HTML Pages using a templating engine.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What does MVC stand for?",
    "answer": "Model, View, Controller",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What does REST mean?",
    "answer": "Representational state transfer",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What function arguments are available to Express.js route handlers?",
    "answer": "req - the request object, res - the response object, next (optional) - a function to pass control to one of the subsequent route handlers",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is a template engine?",
    "answer": "Combines one or more templates with a data model",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is an Express Route in relation to MVC?",
    "answer": "The controller",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is middleware? List some examples of middleware we have used.",
    "answer": "Any number of functions that are invoked by the Express.js routing layer before the final request handler, and thus sits in the middle between a raw request and the final intended route.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is req.body? How did it get there?",
    "answer": "A JavaScript Object representation of the submitted form.  Added to the reqest by the bodyparser. ",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is the default template engine used in Express?",
    "answer": "Jade or Pug",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is the most significant advantage of TDD over EDD?",
    "answer": "No extra cost or effort to re-validate the behavior of the system. Able to re-execute the tests with no manual effort.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is the parameter 'next' used for in Express?",
    "answer": "A function to pass control to one of the subsequent route handlers",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What is the purpose of the 'next' parameter?",
    "answer": "Provides access to next middleware function in the application's request-response cycle.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "What XP Value does using the express-generator espouse?",
    "answer": "Simplicity",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "When would you use EDD instead of TDD?",
    "answer": "Never for production, but most commonly for learning new frameworks / API's that you don't yet know how to test.",
    "subject": "Fullstack: Express"
  },
  {
    "stem": "In this URL, what are the query parameters/query string? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": "id=5421",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "In this URL, what is the domain? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": "usaa",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "In this URL, what is the path? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": "/path/resource",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "In this URL, what is the port? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": ":3000/",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "In this URL, what is the protocol? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": "https://",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "In this URL, what is the Subdomain? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": "wwww.",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "In this URL, what is the top-level domain? https://www.usaa.com:3000/path/resource:?id=5421",
    "answer": ".com",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What are the components of an HTTP request (not a duplicate)?",
    "answer": "verb, version, url, header(s) (includes cookies), and body",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What are the components of an HTTP response (not a duplicate)?",
    "answer": "status code & reason phrase, header(s) (includes cookies), and body",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What are the VERBS associated with  HTTP requests?",
    "answer": "Post, Put, Get, Patch, Delete",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does a 1XX response code indicate?",
    "answer": "Informational (interim response, non-terminal, 101 switch to websocket",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does a 2XX response code indicate?",
    "answer": "Successful (200 okay)",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does a 3XX response code indicate?",
    "answer": "Redirect (301 Moved Permanently, 304 Not Modified)",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does a 4XX response code indicate?",
    "answer": "Client Error (401 Unauthorized, 404 Not Found)",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does a 5XX response code indicate?",
    "answer": "Server Error (500 Internal Server Error)",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does CRUDL stand for?",
    "answer": "Create, Read, Update, Delete, List",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does it mean to be idempotent?",
    "answer": "This means a client could make the same call repeatedly while producing the same results",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What does REST stand for?",
    "answer": "Representational State Transfer",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What is Hypertext?",
    "answer": "A text that contains links to other text",
    "subject": "Fullstack: HTTP"
  },
  {
    "stem": "What happens to the first word in a line of a Pug file when followed by a space?",
    "answer": "It will be rendered as HTML opening and closing tag (containing everything else in that line after the space).",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "What is the benefit of using Pug over writing plain HTML?",
    "answer": "HTML is static. With Pug it becomes possible to render HTML pages with dynamic (variable) content.",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "What is the difference between Jade and Pug?",
    "answer": "No difference. Jade is just the old name for Pug.",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "What is the generic name for tools like Pug?",
    "answer": "Template engine",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "What is the input when rendering a page with Pug?",
    "answer": "A pug file and a JSON object containing the variable content of the page to render.",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "What is the output format when rendering a page with Pug?",
    "answer": "HTML",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "Which symbols in Pug files indicate a switch to JavaScript syntax?",
    "answer": "dash (-), equals (=), hash with curly brackets (#{..}), round brackets (for='attributes')",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "Why would someone use Pug layouts?",
    "answer": "To apply the same look and feel to all pages (e.g. header and footer).",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "Why would someone use Pug mixins?",
    "answer": "To reduce pug code duplication (DRY principle).",
    "subject": "Fullstack: Pug/Jade"
  },
  {
    "stem": "How do you modify state within a React component?",
    "answer": "Using 'setState()'. Do not modify state directly.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "How do you modify the state of a different React component?",
    "answer": "Not at all! State is visible to the component only.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "How do you pass data 'down' to a React child component?",
    "answer": "As value properties.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "How do you pass data 'up' to a React parent component?",
    "answer": "By passing 'down' a callback property.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "Using ES6 syntax, what additional step is necessary in order to use 'this.refs'?",
    "answer": "'this' has to be bound to the method that tries to use 'this.refs'.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "What happens when you call 'setState(..)' in a React component?",
    "answer": "React merges the given value into the previous state and schedules an asynchronous update of the Shadow DOM. Eventually the Browser DOM gets updated - but only the element nodes that changed.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "What is so special about React events?",
    "answer": "They are synthetic events - wrappers around native browser events.",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "Which React feature can be used to access DOM elements?",
    "answer": "References: 'this.refs'",
    "subject": "Fullstack: React - Events, State, Refs"
  },
  {
    "stem": "How do you access arguments, passed into a React components?",
    "answer": "this.props.argumentName",
    "subject": "Fullstack: React - JSX, Components, Properties"
  },
  {
    "stem": "How do you modify properties of a React component?",
    "answer": "Not at all! Component properties are immutable.",
    "subject": "Fullstack: React - JSX, Components, Properties"
  },
  {
    "stem": "How do you pass arguments to React components?",
    "answer": "As properties, by adding element attributes to a child component.",
    "subject": "Fullstack: React - JSX, Components, Properties"
  },
  {
    "stem": "Name two benefits of using React.",
    "answer": "Components support reusability. Simple and fast creation of Single Page Applications. With rich user interactions. Offloads computation for presentation to client.",
    "subject": "Fullstack: React - JSX, Components, Properties"
  },
  {
    "stem": "What is a PropType?",
    "answer": "A declaration to add type checking for properties.",
    "subject": "Fullstack: React - JSX, Components, Properties"
  },
  {
    "stem": "What is JSX?",
    "answer": "A preprocessor step that adds XML syntax to JavaScript. JSX has been developed and is maintained by the React team.",
    "subject": "Fullstack: React - JSX, Components, Properties"
  },
  {
    "stem": "Does a reducer mutate state?",
    "answer": "No! Reducers should NOT mutate state, but instead makes a new state.",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "How is state changed in Redux?",
    "answer": "Reducers",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "In Redux, what is an action?",
    "answer": "Payloads of information that send data from your application to your store",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "In Redux, where is the state of your application held?",
    "answer": "The store",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What are the three methods on the store object that are useful?",
    "answer": "getState(), dispatch(), subscribe()",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What is a pure function?",
    "answer": "A function where the return value is always the same for the same arguments and invoking it has no side effects.",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What is a reducer?",
    "answer": "A function that takes state and an action as arguments and returns a new state.",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What is one use case for a state management tool like Redux?",
    "answer": "When a React application becomes extremely complex with lots of parent/child components",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What is Redux?",
    "answer": "A predicatable state management tool",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What is state?",
    "answer": "The data within your application",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What's the major difference between React and Redux",
    "answer": "State is stored in the 'store' in Redux and state is maintained at component level in React",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "What's the major difference between React and Redux",
    "answer": "State is stored in the 'store' in Redux and state is maintained at component level in React",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "Which component is used to allow a React app to know about the store?",
    "answer": "<Provider />",
    "subject": "Fullstack: Redux"
  },
  {
    "stem": "Can the remote origin repository be ahead of the local repository?",
    "answer": "Yes.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "How can a 'merge conflict' be resolved?",
    "answer": "Edit the files manually to fix the conflicting changes and then add the resolved files using 'git add'. Then run 'git rebase --continue' or 'git commit'",
    "subject": "Git: Advanced"
  },
  {
    "stem": "How can you bring a new feature in the main branch?",
    "answer": "'git merge' or 'git pull'",
    "subject": "Git: Advanced"
  },
  {
    "stem": "How many 'remotes' can a repository have?",
    "answer": "Unlimited",
    "subject": "Git: Advanced"
  },
  {
    "stem": "What does 'git remote -v' do?",
    "answer": "List the remote repositories associated with the local repository.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "What is a 'merge conflict' in git?",
    "answer": "The commit that has to be merged has some change in one place, and the current commit also has a change at the same place. Git will not be able to predict which change should take precedence.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "What is the function of 'git push'?",
    "answer": "Pushes your changes to the remote repository. Technically it Updates remote refs along with associated objects.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "What is the function of git clone?",
    "answer": "The git clone command creates a copy of an existing git repository. To get the copy of a central repository, 'cloning'  is the most common way used by programmers.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "What is the purpose of branching in git?",
    "answer": "Allows you to go to your previous work keeping your recent work intact.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "Which git commands interact with the remote server?",
    "answer": "fetch, pull, push. No other commands connect to the remote server. Unlike SVN, Perforce, etc, no server is required.",
    "subject": "Git: Advanced"
  },
  {
    "stem": "Can any directory be a git repository?",
    "answer": "Yes. git init works in any directory.",
    "subject": "Git: Basics"
  },
  {
    "stem": "How can you create a repository in git?",
    "answer": "'git init' in any directory.",
    "subject": "Git: Basics"
  },
  {
    "stem": "How do you stage all untracked and modified files in a git repository?",
    "answer": "'git add .'",
    "subject": "Git: Basics"
  },
  {
    "stem": "How to you list the commit history of a repository?",
    "answer": "git log",
    "subject": "Git: Basics"
  },
  {
    "stem": "Is 'Updated about page' a good commit message? Why or why not?",
    "answer": "No, it does not tell you WHY it changed. Was it a bug, a story, or something else?",
    "subject": "Git: Basics"
  },
  {
    "stem": "What are the four states of a file in git?",
    "answer": "Untracked, Unmodified (Committed), Modified, Staged (Added)",
    "subject": "Git: Basics"
  },
  {
    "stem": "What does 'git diff' do?",
    "answer": "Shows the changes to all modified files in the repository",
    "subject": "Git: Basics"
  },
  {
    "stem": "What does 'git init' do?",
    "answer": "Initializes any directory to a new git repository.",
    "subject": "Git: Basics"
  },
  {
    "stem": "What does 'git status' do?",
    "answer": "Shows the states of the files in a git repository",
    "subject": "Git: Basics"
  },
  {
    "stem": "What does commit object contain??",
    "answer": "1) A set of files, representing the state of the entire repository at a given point of time. 2) Reference to parent commit objects. 3) An SHA name, a 40 character string that uniquely identifies the commit object.",
    "subject": "Git: Basics"
  },
  {
    "stem": "What does the .gitignore file do?",
    "answer": "Tells git which files should not be included in the repository",
    "subject": "Git: Basics"
  },
  {
    "stem": "What is 'git add' used for?",
    "answer": "Changes the tracking state of the files from Modified or Untracked to Staged.",
    "subject": "Git: Basics"
  },
  {
    "stem": "What is 'git status' used for?",
    "answer": "Shows the difference between the working directory and the index (committed files).",
    "subject": "Git: Basics"
  },
  {
    "stem": "What is the difference between a local and remote repository?",
    "answer": "The local repository lives on your local machine and is a complete copy of the remote repository which is located on a remote server.",
    "subject": "Git: Basics"
  },
  {
    "stem": "Which git command(s) will work outside of a git repository?",
    "answer": "git init",
    "subject": "Git: Basics"
  },
  {
    "stem": "DOM is what kind of a representation of an HTML document?",
    "answer": "It is a tree-based representation; where HTML tags are nodes and its nested tags are children nodes.",
    "subject": "HTML: DOM"
  },
  {
    "stem": "How does Javascript interact with the DOM?",
    "answer": "Javacript interacts with the DOM API",
    "subject": "HTML: DOM"
  },
  {
    "stem": "True or False: the DOM is language and platform agnostic.",
    "answer": "True",
    "subject": "HTML: DOM"
  },
  {
    "stem": "Under what condition would the DOM differ from the HTML file?",
    "answer": "Javascript could be used on page load to modify DOM contents.",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What are some examples of page events?",
    "answer": "Some examples are: onLoad, onChange, onClick, and onUpload",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What can be 'attached' to events generated by a page?",
    "answer": "Event handlers",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What does DOM stand for?",
    "answer": "It stands for Document Object Model",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What gets generated in response to specific actions on a page?",
    "answer": "Events are generated in response to specific on page actions",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What is the difference between an HTML file and DOM?",
    "answer": "The DOM is a _representation_ of an HTML file. It doesn't exist in a file but in the browser.",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What is the DOM API?",
    "answer": "It is the interface through which Javascript can access and change DOM elements.",
    "subject": "HTML: DOM"
  },
  {
    "stem": "What is the global Javascript object used to manipulate the DOM?",
    "answer": "The <code>document</code> object",
    "subject": "HTML: DOM"
  },
  {
    "stem": "Explain checked exceptions vs. unchecked exceptions",
    "answer": "Checked exceptions must be caught or declared as thrown, unchecked do not need to be caught",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Explain the difference between a synchronized block and a synchronized method.",
    "answer": "Method obtains a lock on the instance of the containing object. Block obtains a lock on the object specified in the block.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Explain the final keyword for a class.",
    "answer": "The class cannot be sub-classed (extended).",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Explain the final keyword for a method of a class.",
    "answer": "The method cannot be overridden in subclasses.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Explain the final keyword for a property.",
    "answer": "Value of property cannot be changed outside the constructor.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "If two objects are equal (using the equals method), will they have the same hash code? Why?",
    "answer": "Yes, the contract for equals states the hash code must be equal for objects that are equal.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What are the access/visibility modifiers in Java?",
    "answer": "public, protected, private, and package (default)",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What is reflection and when do you use it?",
    "answer": "Reflection is when an application has the ability to examine and modify its own structure and behavior at runtime. Allows the runtime variation of the concrete implementation, method called, or variable modified to vary at runtime.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What is synchronization and when do you use it?",
    "answer": "Synchronization controls access of multiple threads to shared resources. Without synchronization, it is possible for one thread to modify a shared object while another thread is in the process of using or updating that object's value.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What is the difference between abstract classes and interfaces?",
    "answer": "Abstract classes can contain code/implementation. Interfaces are simply a declarative structure",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What is the difference between an anonymous class and an inner class?",
    "answer": "Anonymous classes are declared within a method body and cannot be reused. Inner classes are declared within a class body and can be reused.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What is the difference between an inner class and a static inner class?",
    "answer": "Inner class has a reference to its enclosing class and cannot be instantiated independent of its enclosing class. Static inner class does not have a reference to its enclosing instance and can be instantiated directly.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "What is the difference between the .equals method and the '==' operator?",
    "answer": "'==' performs a comparison of the object reference, .equals performs a class specific comparison.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "When do static members of an object get initialized?",
    "answer": "The first time the object is instantiated or invoked. NOT at application startup.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "When is type checking performed on generic classes?",
    "answer": "Compile time",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Why would you declare a private constructor?",
    "answer": "So the object cannot be externally instantiated.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Why would you declare a serial version UID field?",
    "answer": "SUID is used to inform the Java serialization mechanism which version of the class is compatible with this serialized object.",
    "subject": "Java: Advanced"
  },
  {
    "stem": "Does Java have global functions?",
    "answer": "No. Object methods only.",
    "subject": "Java: Basics"
  },
  {
    "stem": "How do you declare a JUnit test?",
    "answer": "By annotating a void test method without parameters with '@Test'.",
    "subject": "Java: Basics"
  },
  {
    "stem": "How do you indicate in Java that a method does not return anything?",
    "answer": "Declare method with a return type of 'void'.",
    "subject": "Java: Basics"
  },
  {
    "stem": "Name a common library for unit testing in Java.",
    "answer": "JUnit",
    "subject": "Java: Basics"
  },
  {
    "stem": "Name a common TDD assertion library for Java.",
    "answer": "Hamcrest, FEST assert",
    "subject": "Java: Basics"
  },
  {
    "stem": "What does 'this' refer to in Java?",
    "answer": "The current instance. Always.",
    "subject": "Java: Basics"
  },
  {
    "stem": "What happens in Java if you forgot to terminate a statement with a semicolon?",
    "answer": "The compiler will show a compiler error.",
    "subject": "Java: Basics"
  },
  {
    "stem": "What is the difference between a class and an instance?",
    "answer": "A class is a template for a new object; an instance is an object which was created from that template.",
    "subject": "Java: Basics"
  },
  {
    "stem": "Does the Java language allow multiple inheritance?",
    "answer": "Yes. It allows multiple interface inheritance. It does disallow multiple implementation inheritance though.",
    "subject": "Java: Inheritance"
  },
  {
    "stem": "What can happen if the <code>@Override</code> annotation is omitted from an overriding method?",
    "answer": "A future change to the super-class method could result in the sub-class method no-longer overriding a method and the compiler will not catch it.",
    "subject": "Java: Inheritance"
  },
  {
    "stem": "What design pattern is preferred over inheritance?",
    "answer": "Composition",
    "subject": "Java: Inheritance"
  },
  {
    "stem": "What is the <code>@Override</code> annotation and where can you use it?",
    "answer": "Indicates that a method declaration is intended to override a method declaration in a super class or implemented interface. Used only on methods.",
    "subject": "Java: Inheritance"
  },
  {
    "stem": "Why is composition preferred over inheritance?",
    "answer": "Composition allows reuse of functionality without the single-parent limitiation of inheritance.",
    "subject": "Java: Inheritance"
  },
  {
    "stem": "A local variable stores temporary state; it is declared inside a ___.",
    "answer": "Method",
    "subject": "Java: Scope"
  },
  {
    "stem": "A variable declared within the opening and closing parenthesis of a method is called a ___.",
    "answer": "Parameter",
    "subject": "Java: Scope"
  },
  {
    "stem": "A/An ___ is a container object that holds a fixed number of values of a single type",
    "answer": "Array",
    "subject": "Java: Scope"
  },
  {
    "stem": "Character strings are represented by the class ___.",
    "answer": "java.lang.String",
    "subject": "Java: Scope"
  },
  {
    "stem": "How long does a <code>class variable</code> live?",
    "answer": "the life of the JVM",
    "subject": "Java: Scope"
  },
  {
    "stem": "How long does a <code>method parameter</code> live?",
    "answer": "the duration of the method invocation",
    "subject": "Java: Scope"
  },
  {
    "stem": "How long does an <code>instance variable</code> live?",
    "answer": "the life of the  instance",
    "subject": "Java: Scope"
  },
  {
    "stem": "The term <code>class variable</code> is another name for ___.",
    "answer": "a static field",
    "subject": "Java: Scope"
  },
  {
    "stem": "The term <code>instance variable</code> is another name for ___.",
    "answer": "a non-static field",
    "subject": "Java: Scope"
  },
  {
    "stem": "What are the eight primitive data types supported by the Java programming language?",
    "answer": "byte, short, int, long, float, double, boolean, char",
    "subject": "Java: Scope"
  },
  {
    "stem": "What best describes the scope system in Java?",
    "answer": "Java has <code>block scope</code>",
    "subject": "Java: Scope"
  },
  {
    "stem": "What is the scope of a protected class? (Class,Package,Subclass,World)",
    "answer": "Subclass",
    "subject": "Java: Scope"
  },
  {
    "stem": "Is asynchronous code <i>faster</i> than synchronous code?",
    "answer": "No, it still takes the same amount of time, but the program is more responsive so it might appear to be faster.",
    "subject": "JS: Async"
  },
  {
    "stem": "What is the output of this code?<code><p>&nbsp; var myOutput = &#39;&#39;;</p><p>&nbsp; var contents = fs.readFile(&#39;foo.txt&#39;, (err, data) => {<br />&nbsp; &nbsp; myOutput += data.toString()<br />&nbsp; });</p><p>&nbsp; console.log(contents);<br />&nbsp; console.log(myOutput);</p></code>",
    "answer": "undefined<br>undefined",
    "subject": "JS: Async"
  },
  {
    "stem": "What is the output of this code?<code><p>const myOutput = [10, 11, 13].map(console.log)</p><p>console.log(myOutput)</p></code>",
    "answer": "<p>10 0 [ 10, 11, 13 ]<br />11 1 [ 10, 11, 13 ]<br />13 2 [ 10, 11, 13 ]<br />[ undefined, undefined, undefined ]</p>",
    "subject": "JS: Async"
  },
  {
    "stem": "What is the output of this code?<code><p>var myOutput = &#39;&#39;;</p><p>var contents = fs.readFile(&#39;someFile.txt&#39;, (err, data) =&gt; {<br />&nbsp; console.log(data.toString());<br />});</p><p>console.log(contents);</p></code>",
    "answer": "undefined<br><code>contents of the file</code>",
    "subject": "JS: Async"
  },
  {
    "stem": "What is the output of this code?<code><p>var myOutput = fs.readFile(&#39;someFile.txt&#39;)</p><p>console.log(myOutput)</p></code>",
    "answer": "undefined",
    "subject": "JS: Async"
  },
  {
    "stem": "Is NaN === NaN?",
    "answer": "NaN === NaN evaluates to false",
    "subject": "JS: Basics"
  },
  {
    "stem": "Is there a potential pitfall with using typeof bar === 'object' to determine if bar is an object? If so, how can this pitfall be avoided?",
    "answer": "typeof null === 'object' evaluates to true, so does typeof [].  Avoid this by checking for bar being null or an array.",
    "subject": "JS: Basics"
  },
  {
    "stem": "What are the benefits of including 'use strict' at the beginning of the file?",
    "answer": "Prevents accidental globals; Disallows duplicate property names or parameter values; More benefits covered later in the course",
    "subject": "JS: Basics"
  },
  {
    "stem": "What is NaN?",
    "answer": "It represents a value that is 'not a number'",
    "subject": "JS: Basics"
  },
  {
    "stem": "What is the difference between == and ===?",
    "answer": "== is abstract equality, which will attempt to resolve the data types via type coercion before making a comparison. === is strict equality, which will will return false if the types are different",
    "subject": "JS: Basics"
  },
  {
    "stem": "What is the difference Boolean and boolean?",
    "answer": "Booleean's are instances. boolean is a literal.",
    "subject": "JS: Basics"
  },
  {
    "stem": "What is the output of 'console.log({} === {})?",
    "answer": "false - objects cannot be compared using === or ==",
    "subject": "JS: Basics"
  },
  {
    "stem": "What is the typeof NaN?",
    "answer": "typeof NaN === 'number' evaluates to true",
    "subject": "JS: Basics"
  },
  {
    "stem": "Does ES6 use classic inheritance?",
    "answer": "No. It's still based on Prototypal Inheritance. The new keywords are just 'syntactical sugar'",
    "subject": "JS: Classes"
  },
  {
    "stem": "List at least two steps, required for Prototypal Inheritance in JavaScript.",
    "answer": "Invoke constructor function of super type with apply or call. Set prototype of sub type to new object that is linked to prototype of super type. Reset prototype constructor to sub type constructor.",
    "subject": "JS: Classes"
  },
  {
    "stem": "What is so special about class definitions in ES6?",
    "answer": "They keywords are just syntactical sugar.",
    "subject": "JS: Classes"
  },
  {
    "stem": "Which keyword can be used in ES6 to inherite from a certain super type?",
    "answer": "extends",
    "subject": "JS: Classes"
  },
  {
    "stem": "Name at least 2 contexts of 'this' in JavaScript.",
    "answer": "Global, Object Method, Constructor, apply & call",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when invoking a global function in node.js?",
    "answer": "The 'global' object.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when invoking a global JavaScript function in a browser?",
    "answer": "The 'window' object.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when invoking a global JavaScript function in strict mode?",
    "answer": "Undefined.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when used within a JavaScript constructor function?",
    "answer": "The object, being created.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when used within a JavaScript function that gets invoked with Function.prototype.call or .apply?",
    "answer": "That depends on what is passed as first argument to Function.prototype.call or .apply.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when used within a JavaScript function, added to the prototype of a constructor function?",
    "answer": "The object, constructed with the construtor function.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "What is 'this' when used within an JavaScript object method?",
    "answer": "The object, having the method.",
    "subject": "JS: Contexts"
  },
  {
    "stem": "If a function takes another function?",
    "answer": "Yes. The result can be any size array or any data type.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What are the parts of a function?",
    "answer": "name (optional in some cases), parameters, body",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What do you call a function that has at least one bound variable?",
    "answer": "Closure",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is a bound variable?",
    "answer": "A variable is bound when the value of the variable has been substituted by a specific value. i.e. in a closure instance",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is a closure?",
    "answer": "A function containing at least one bound variable",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is a free variable?",
    "answer": "A free variable is any variable that is neither local to the function, nor a parameter of the function.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is a higher order function?",
    "answer": "A function that accepts a function as a parameter, returns a function, or both.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is an  advantage of a higher order function?",
    "answer": "Change behavior of callee by passing in a function. ",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is the contract of the filter function callback?",
    "answer": "If the callback returns true, the element will be included in the returned array, otherwise it will excluded.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "What is the return type of the reduce function?",
    "answer": "Any data type - array, object, number, string, etc.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "When using the filter function, can the resulting array contain FEWER elements than the original array?",
    "answer": "Yes, the array can be the same size or have some elements removed resulting in a smaller array.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "When using the filter function, can the resulting array contain MORE elements than the original array?",
    "answer": "No, the array will be of equal size or smaller.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "When using the map function, can the resulting array contain FEWER elements than the original array?",
    "answer": "No, the array will be of equal size",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "When using the map function, can the resulting array contain MORE elements than the original array?",
    "answer": "No, the array will be of equal size",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "When using the reduce function, can you return an array with FEWER elements than the original array?",
    "answer": "Yes. The result can be any size array or any data type.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "When using the reduce function, can you return an array with MORE elements than the original array?",
    "answer": "Yes. The result can be any size array or any data type.",
    "subject": "JS: Higher Order Functions"
  },
  {
    "stem": "How does the JavaScript runtime evaluate if an object has a certain property or not?",
    "answer": "It traverses the Prototype Chain.",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "Is it possible to add behavior to JavaScript object instances after they have been created?",
    "answer": "Yes. By adding a function to one of the objects in the Prototype Chain.",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "Is it possible to add value properties to JavaScript object instances after they have been created?",
    "answer": "Only static properties, that are shared between all instances.",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "What is the last element of the Prototype Chain?",
    "answer": "The Object prototype.",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "What is the type of Object?",
    "answer": "A (constructor) function.",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "What is the type of Object.prototype?",
    "answer": "object",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "Where is the end of the Prototype Chain pointing to?",
    "answer": "Nowhere (null).",
    "subject": "JS: Prototype Chain"
  },
  {
    "stem": "What cannot be mocked in Mokito?",
    "answer": "hashCode(), equals(), final classes, final methods, static methods",
    "subject": "Mocking in Java"
  },
  {
    "stem": "What is a mock?",
    "answer": "A mock object is a replacement for a dependency in a unit test",
    "subject": "Mocking in Java"
  },
  {
    "stem": "What strategy do we use to isolate a class from its dependencies?",
    "answer": "Dependency injection",
    "subject": "Mocking in Java"
  },
  {
    "stem": "What type of tests are you writing when you're using mocks?",
    "answer": "Unit tests",
    "subject": "Mocking in Java"
  },
  {
    "stem": "What things tell you that the code is probably well organized and what things tell you it probably isn't?",
    "subject": "SWE: Code Quality"
  },
  {
    "stem": "When you are first becoming acquainted with a new code base, what things do you notice, or look for, which give you an indication of the quality of the code?",
    "subject": "SWE: Code Quality"
  },
  {
    "stem": "You have a performance problem with your application, what do you do first?",
    "answer": "Run a profiler to gather data about exactly where the problem is located. (Don't guess!)",
    "subject": "SWE: Debugging"
  },
  {
    "stem": "Explain the details and usage of a design pattern that you have used, other than singleton.",
    "subject": "SWE: Design Patterns"
  },
  {
    "stem": "Name two SOLID design principles?",
    "answer": "Single Responsibility Principle (SRP), Open/Closed Principle (OCP), Liskov Substitution Principle (LSP), Interface Segregation Principle (ISP), Dependency Inversion Principle (DIP)",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: Describing a class can be used to check if there is a violation of the Single Responsibility Principle (SRP). How?",
    "answer": "By counting the 'and's required to describe the behavior of the class.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How could you describe the Interface Segregation Principle (ISP) in simple words?",
    "answer": "No client should be forced to depend on methods it does not use.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How could you describe the Open/Closed Principle (OCP) in simple words?",
    "answer": "We should strive to write code that doesn’t have to be changed every time the requirements change.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How does this code violate the Dependency Inversion Principle (DIP)?<br><br><code>class BookService {<br><br>&nbsp;&nbsp;ServerSideBookValidator validator =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new ServerSideBookValidator();<br>&nbsp;&nbsp;&nbsp;&nbsp;DbConnection connection =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;App.config.getDatabaseConnection();<br><br>&nbsp;&nbsp;void saveBook(Book book) {<br>&nbsp;&nbsp;&nbsp;&nbsp;validator.validateBook(book);<br>&nbsp;&nbsp;&nbsp;&nbsp;connection.insert(book);<br>&nbsp;&nbsp;}<br>}</code>",
    "answer": "The BookService does not depend on an abstract BookValidator and it knows about an App, an App's config and the config's database connection.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How does this code violate the Interface Segregation Principle (ISP)?<br><br><code>interface Bird {<br>&nbsp;&nbsp;default void eat() {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Eating ...&quot;);<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;default void fly() {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Flying ...&quot;);<br>&nbsp;&nbsp;}<br>}<br><br>class Crow implements Bird { }<br><br>class Eagle implements Bird { }<br><br>class Ostrich implements Bird {<br>&nbsp;&nbsp;void fly() {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Walking ...&quot;);<br>&nbsp;&nbsp;}<br>}</code>",
    "answer": "An 'Ostrich' can not fly. Yet we are forced to implement this 'Bird' method. Also the client might have to care about the specific behavior of an 'Ostrich' 'Bird'. This code also violates the LSP.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How does this code violate the Liskov Substitution Principle (LSP)?<br><br><code>List&lt;Duck&gt; ducks = asList(<br>&nbsp;&nbsp;&nbsp;&nbsp;new Duck(),<br>&nbsp;&nbsp;&nbsp;&nbsp;new Duck(),<br>&nbsp;&nbsp;&nbsp;&nbsp;new ToyDuck()<br>);<br><br>ducks.forEach(duck -&gt; {<br>&nbsp;&nbsp;if (duck instanceof ToyDuck) {<br>&nbsp;&nbsp;&nbsp;&nbsp;((ToyDuck) duck).batteries.add(&quot;2&quot;);<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;System.out.println(duck.toString());<br>&nbsp;&nbsp;System.out.println(duck.quack());<br>&nbsp;&nbsp;System.out.println(duck.swim());<br>});</code>",
    "answer": "The code apparently needs to care about 'ToyDucks', a subtype of 'Duck'. A 'ToyDuck' is a 'Duck' but does not behave like a 'Duck' when it comes to executing 'ToyDuck' methods without batteries.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How does this code violate the Open/Closed Principle (OCP)?<br><br><code>class Customer {<br><br>&nbsp;&nbsp;List&lt;Double&gt; drinks = new ArrayList&lt;&gt;();<br>&nbsp;&nbsp;boolean isHappyHour;<br><br>&nbsp;&nbsp;void orderDrinks(double price, int quantity) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (isHappyHour) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drinks.add(price * quantity * 0.5);<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drinks.add(price * quantity);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;double getTotalDue() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return drinks.stream()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.mapToDouble(Double::doubleValue)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.sum();<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;void setHappyHour(boolean isHappyHour) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.isHappyHour = isHappyHour;<br>&nbsp;&nbsp;}<br>}</code>",
    "answer": "If the requirements change and we would have to add a new promotion like '3 for 2', we would have to touch at least 3 code locations. The Customer class is not open for extenstion and closed for modification.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: How many responsibilities does the class containing this method seem to have?<br><br><code>router.post('/students', (req, res) => {<br>&nbsp;&nbsp;if (req.body.name.count > 50) {<br>&nbsp;&nbsp;&nbsp;res.send(400)<br>&nbsp;&nbsp;&nbsp;return<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;db.get('students').insert(req.body, (err, docs) => {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (err) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.send(503, 'Failed!')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;res.send('&lt;html&gt;&lt;h1&gt;Success!&lt;/h1&gt;&lt;/html&gt;')<br>&nbsp;&nbsp;})<br>})</code>",
    "answer": "5: Request Handling, Validation, Persistance, Error Handling, Response Rendering",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What does DIP stand for?",
    "answer": "Dependency Inversion Principle",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What does ISP stand for?",
    "answer": "Interface Segregation Principle",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What does LSP stand for?",
    "answer": "Liskov Substitution Principle",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What does OCP stand for?",
    "answer": "Open/Closed Principle",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What does SRP stand for?",
    "answer": "Single Responsibility Principle",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What is the Dependency Inversion Principle (DIP)?",
    "answer": "A. High-level modules should not depend on low-level modules. Both should depend on abstractions. B. Abstractions should not depend on details. Details should depend on abstractions.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What is the Interface Segregation Principle (ISP)?",
    "answer": "Many client-specific interfaces are better than one general-purpose interface.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What is the Liskov Substitution Principle (LSP) about if it's not about inheritance?",
    "answer": "(strong) behavioural sub typing",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What is the Liskov Substitution Principle (LSP)?",
    "answer": "In order for a type system to be sane, subtypes must be substitutable for their super types.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What is the Open/Closed Principle (OCP)?",
    "answer": "Software entities should be open for extension and closed for modification.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: What is the Single Responsibility Principle (SRP)?",
    "answer": "Every class should have one single responsibility. There should never be more than one reason to change.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "SOLID: Which rule of thumb is related to the Dependency Inversion Principle (DIP) and much easier to understand?",
    "answer": "Program to interfaces, not implementations!",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "What does the acronym SOLID stand for?",
    "answer": "5 software engineering design principles: SRP, OCP, LSP, ISP, DIP",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "Why would you follow the SOLID design principles?",
    "answer": "When code is designed carefully and follows these principles, it is easier to maintain, modify and refactor.",
    "subject": "SWE: SOLID Design Principles"
  },
  {
    "stem": "List at least 3 benefits of TDD",
    "answer": "Validation (of production code), Increases Productivity, Acts as Safety Net (for refactoring), Increases Quality, Improves Modularity, Produces Documentation",
    "subject": "TDD: Basics"
  },
  {
    "stem": "Name at least 2 requirements for a good Unit Test",
    "answer": "Test only 1 aspect of a function/method, Tests unit in isolation of dependencies, Tests only 1 path through function/method, Is automated",
    "subject": "TDD: Basics"
  },
  {
    "stem": "What does TDD stand for?",
    "answer": "Test-Driven Development",
    "subject": "TDD: Basics"
  },
  {
    "stem": "What is a Unit Test?",
    "answer": "The a test that verifies the smallest unit of software.",
    "subject": "TDD: Basics"
  },
  {
    "stem": "What is TDD about?",
    "answer": "Creating a reason for writing production code.",
    "subject": "TDD: Basics"
  },
  {
    "stem": "What is the 1st rule of TDD",
    "answer": "You are not allowed to write any production code unless it is to make a failing test pass.",
    "subject": "TDD: Basics"
  },
  {
    "stem": "What is the basic flow of TDD?",
    "answer": "Red, Green, Refactor (Write failing test, Run test(s), Write minimal code to make test pass, Run test(s), Clean up code without breaking tests, Run test(s))",
    "subject": "TDD: Basics"
  },
  {
    "stem": "Which pairing styles did you use yesterday, and why?",
    "answer": "Ping Pong, ",
    "subject": "TDD: Basics"
  },
  {
    "stem": "Why do we always write tests first?",
    "answer": "Define the specification first. i.e. blueprints.",
    "subject": "TDD: Basics"
  },
  {
    "stem": "How do Integration Tests usualy relate to Unit Tests on the Testing Pyramid?",
    "answer": "There are fewer, they are slower and usually harder to implement and therefore more expensive.",
    "subject": "TDD: Integration Testing"
  },
  {
    "stem": "What is the difference between a unit test and an integration test?",
    "answer": "Unit tests validate a class or method in isolation. Integration tests include dependencies",
    "subject": "TDD: Integration Testing"
  },
  {
    "stem": "Why do we need Integration Testing?",
    "answer": "To ensure that units or components work together.",
    "subject": "TDD: Integration Testing"
  },
  {
    "stem": "What is the difference between a mock and a stub?",
    "answer": "Mock cares if you call it. Stubs are sanguine (optimistic or positive - don't care about calls, order, or validation)",
    "subject": "TDD: Mocking"
  },
  {
    "stem": "Are protractor by.* methods asynchronous?",
    "answer": "Yes",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "Do we need QA if we have 100% acceptance test coverage?",
    "answer": "Yes. People are excellent at destructive testing, computers are not. 'here is a hammer, try to break it' We don't necessarily need a QA department, though. A cross-functional team should have at least one team member with QA know-how.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "Do you include negative path tests in acceptance tests?",
    "answer": "It depends. Only if it is important to the end user.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "Does protractor interact directly with the server?",
    "answer": "No, only the browser.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "Should acceptance tests verify the number of records in the database?",
    "answer": "Only indirectly through observing content on the page.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "Should acceptance tests verify the state of the JavaScript data objects in the page?",
    "answer": "Only indirectly through observing content on the page.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What are the by.* functions in protractor?",
    "answer": "Matcher",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What are the objectives of a User Acceptance Test?",
    "answer": "To automate the test if a User Acceptance Criteria is met or not.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What is the difference between 'mocha' and 'jasmine'?",
    "answer": "Both are test runners. Jasmine comes with integrated Matcher/Expectation and Mocking functionality. Mocha relies on other modules like 'chai' or 'sinon' to do that job.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What is the difference between acceptance testing and integration testing?",
    "answer": "Integration testing is about testin if units work together. Acceptance testing is about testing if user acceptance criteria are meet or not.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What is the difference between acceptance testing and UI testing?",
    "answer": "User Interface (UI) testing is about testing user interfaces while the backend is mocked out. Acceptance testing is about testing the application from end to end.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What is the difference between acceptance testing and unit testing?",
    "answer": "Unit testing is about testing the smallest aspect of our production code. Acceptance testing is about testing if user acceptance criteria are meet or not.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What is user acceptance testing?",
    "answer": "The process of writing automated user acceptance tests in order to verify if a user story is implemented according to the user acceptance criteria.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "What underlying tool does protractor use to drive the browswer?",
    "answer": "Selenium, a web browser automation tool.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "When should you use by.xpath(...)?",
    "answer": "This should be avoided because it makes the tests brittle. Use only when another method will not work.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "You are starting a new feature, which type of test do you write first? Unit, Integration, or Acceptance? And why?",
    "answer": "Follow the outside-in approach and you know your done with the feature the moment the acceptance test passes.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "You are using a jquery plugin on the page, should the acceptance tests execute all of the behavior of the plugin?",
    "answer": "No, the developer of the plugin should have tested it. Only test code 'you' write.",
    "subject": "TDD: Protractor"
  },
  {
    "stem": "Name at least two benefits of the Adapter and/or Facade Pattern?",
    "answer": "Isolates code into one location. Simplifies behaviour for rest of application. Enables easy mocking.",
    "subject": "TDD: With External Dependencies"
  },
  {
    "stem": "Name typical external software dependencies?",
    "answer": "Databases, APIs, Microservices, Webservices, Filesystem",
    "subject": "TDD: With External Dependencies"
  },
  {
    "stem": "What are typical issues with external software dependencies?",
    "answer": "Slow, Not available, Not accessable, Not existent, Limited rate/quota",
    "subject": "TDD: With External Dependencies"
  },
  {
    "stem": "What problem do we encounter when it comes to testing applications with external dependencies? How do we address it?",
    "answer": "Communication with external dependencies slows down our tests drastically. This problem can be addresses by using a mock that intercepts the communication with external dependencies and responds quickly with fake responses.",
    "subject": "TDD: With External Dependencies"
  },
  {
    "stem": "What do we call the set of criteria that defines when a User Story can be worked on?",
    "answer": "Defintion of Ready",
    "subject": "User Stories: Agile Refinement"
  },
  {
    "stem": "What do we call the set of criteria that defines when all work of a User Story is finished?",
    "answer": "Defintion of Done",
    "subject": "User Stories: Agile Refinement"
  },
  {
    "stem": "What is the maximum timespan between us talking for the first time about the 'How' of a User Story and delivery of the User Story?",
    "answer": "A bit less than 5 working days (planned on Monday, started on Thursday, delivered on Friday).",
    "subject": "User Stories: Agile Refinement"
  },
  {
    "stem": "Why is so important not to talk about the 'How' of a User Story until right before the implementation begins?",
    "answer": "Because requirements and conditions change over time and talking about the 'How' bears the risk of wasting precious time.",
    "subject": "User Stories: Agile Refinement"
  },
  {
    "stem": "How could you check if a User Story is a good User Story?",
    "answer": "Check if INVEST criteria are given.",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What does INVEST stand for?",
    "answer": "Independent, Negotiable, Valuable, Estimable, Small, Testable",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What makes a User Story estimable?",
    "answer": "There are no (or very few) unknowns AND the complexity is well understood.",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What makes a User Story independent?",
    "answer": "TODO",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What makes a User Story negotiable?",
    "answer": "Everyone agrees that the actual result is defined by collaborative negotiation between the customer (or Product Owner) and the developer (others may be involved)",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What makes a User Story small?",
    "answer": "1 to 3 days work (at most) to meet the definition of done.",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What makes a User Story testable?",
    "answer": "The acceptance criteria is written or can be written immediately.",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "What makes a User Story valuable?",
    "answer": "It has discernible value to a person (Ideally the customer)",
    "subject": "User Stories: INVEST"
  },
  {
    "stem": "Name the three parts of a User Story title.",
    "answer": "Role, Goal, Benefit",
    "subject": "User Stories: Title"
  },
  {
    "stem": "What is the Benefit part of a User Story title about?",
    "answer": "It is about the 'why'. What does the end user in the Role part gain from this User Story.",
    "subject": "User Stories: Title"
  },
  {
    "stem": "What is the Goal part of a User Story title about?",
    "answer": "It is about 'what'. What is the desire of the end user in the Role part.",
    "subject": "User Stories: Title"
  },
  {
    "stem": "What is the Role part of a User Story title about?",
    "answer": "It is about the 'who'. Which end user benefits from this User Story?",
    "subject": "User Stories: Title"
  },
  {
    "stem": "Which of the three User Story parts is optional?",
    "answer": "None!",
    "subject": "User Stories: Title"
  },
  {
    "stem": "How can we estimate User Stories without talking about the 'How'?",
    "answer": "Relative Estimation - Sizing of User Story relative to reference User Stories.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "IPM: The team's velocity is 10 SP. After committing to deliver User Stories, worth 8 SP the team signals that they cannot commit to deliver more User Stories in this iteration. The Product Manager insists that two more User Stories have to be finished until Friday. How should you react?",
    "answer": "You could ask the Product Manager if he could imagine to drop some of the other User Stories instead. Do not over-commit!",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "IPM: Your Iteration Goal seems to not contain any value for the end user (e.g. User Stories). How should you react?",
    "answer": "Suggest to work on at least one User Story of high quality. If there are no User Stories, interrupt the IPM ceremony and do a Pre-IPM instead.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "Nobody seems to notice (or care) that the team did not deliver all committed User Stories. When is a good time to bring that up?",
    "answer": "During the Retrospective (if there is no other ceremony).",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "Nobody seems to notice (or care) that the team did not deliver any value to the end user in this iteration. When is a good time to bring that up?",
    "answer": "During the Retrospective (if there is no other ceremony).",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "What are the goals of the IPM?",
    "answer": "1) Define an iteration goal. 2) Team to commit to deliver a set of User Stories until the end of the iteration. 3) Each team member to fully understand what should be delivered and why.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "What are the goals of the Team Standup?",
    "answer": "1) To synchronize work with other team members. 2) To clarify if team is on track to meet Iteration Goal. 3) To identify blockers.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "What can you do if the quality of User Stories, presented by the Product Manager seems to be low during the IPM?",
    "answer": "Reject working on these User Stories and suggest to help improving them first. A Pre-IPM ceremony well in advance to the IPM can be used to achieve exactly that.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "What could you do if the Product Manager asks for a status report in the Team Standup?",
    "answer": "You could remind him about the actual goal of the Team Standup and ask him to talk to the team once the Standup is over.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "What is one goal of the Inception?",
    "answer": "Ensure that the whole teams understands the Business Goals, Anti-Goals and Risks, User Roles/Personas, Workflows and Activities.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "What is the goal of the Pre-IPM?",
    "answer": "To get enough User Stories ready for the IPM - ready according to the Definition of Ready (usually INVEST criteria).",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "When are the goals of the Retrospective?",
    "answer": "To create actionable Action Items for improvement during the next Iteration.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "When is the first time that we should talk about the 'How' of a User Story?",
    "answer": "During the Iteration, after the IPM.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "Who hosts the Team Standup?",
    "answer": "The team.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "Who is the target audience of the Team Standup?",
    "answer": "The team.",
    "subject": "XP: Ceremonies"
  },
  {
    "stem": "Name two Rules of Engagement when giving feedback.",
    "answer": "And, not but; Ask first; Start and end with the positives; Get to genuinely know people; Use the other person's name",
    "subject": "XP: Giving Feedback"
  },
  {
    "stem": "Name two XP ceremonies.",
    "answer": "Inception, Pre-IPM, IPM, Standup, Retro",
    "subject": "XP: Iteration"
  },
  {
    "stem": "What is the input to an XP Iteration cycle?",
    "answer": "User Stories, ready according to Definiton of Ready",
    "subject": "XP: Iteration"
  },
  {
    "stem": "What is the output of an XP Iteration cycle?",
    "answer": "A production-ready product increment with additional value to the end user.",
    "subject": "XP: Iteration"
  },
  {
    "stem": "When does the end user get value out of an XP software project?",
    "answer": "Every week.",
    "subject": "XP: Iteration"
  },
  {
    "stem": "Your navigator on their phone or another computer. What do you do?",
    "answer": "Does anyone have a different answer?",
    "subject": "XP: Pairing"
  },
  {
    "stem": "Your pair goes silent. What do you do?",
    "answer": "Does anyone have a different answer?",
    "subject": "XP: Pairing"
  },
  {
    "stem": "Your pair is telling you what to type and corrects every syntax error immediately. What do you do?",
    "answer": "Does anyone have a different answer?",
    "subject": "XP: Pairing"
  },
  {
    "stem": "Your pair keeps the keeps the keyboard the whole time, or takes over inappropriately. What do you do?",
    "answer": "Does anyone have a different answer?",
    "subject": "XP: Pairing"
  },
  {
    "stem": "Your pair proposes a great theory for you to test, gives high-level suggestions, asks about edge cases, and thoughtfully answers questions. What do you do?",
    "answer": "Does anyone have a different answer?",
    "subject": "XP: Pairing"
  },
  {
    "stem": "Are the XP principles the only possible principles to guide your teams software development practices?",
    "answer": "No. You team can add any principles needed to guide your team’s practices, but these are the principles that guide XP.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Accepted Responsibility' helps us build better software?",
    "answer": "One example is that management cannot tell you to skip testing to meet a deadline. The pair that accepts responsibly for implementing a story is ultimately responsible for the design, implementation, and testing of the story.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Baby Steps' helps us build better software?",
    "answer": "Baby steps acknowledge that the overhead of small steps is much less than when a team wastefully recoils from aborted big changes.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Diversity' helps us build better software?",
    "answer": "Teams need diversity to bring together a variety of skills, attitudes, and perspectives to see problems and pitfalls, to think of multiple ways to solve problems, and to implement the solutions.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Economics' helps us build better software?",
    "answer": "It helps make sure what you are doing has business value, meets business goals, and serves business needs",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Failure' helps us build better software?",
    "answer": "Use failure to impart knowledge. Knowledge is valuable and sometimes failure is the only way to gain knowledge.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Flow' helps us build better software?",
    "answer": "We provide more business value when delivering a steady flow of software by engaging in all the activities of development simultaneously.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Humanity' helps us build better software?",
    "answer": "So the software we write meets human needs, acknowledges human frailty, and leverages human strength.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Improvement' helps us build better software?",
    "answer": "Do the best you can today, striving to do better tomorrow. Waiting for perfection stops the flow of business value.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Mutual Benefit' helps us build better software?",
    "answer": "It causes us to search for practices that benefit the team now, the team later, and the customer as well",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Opportunity' helps us build better software?",
    "answer": "Strive for excellence by turning problems into opportunities for learning and improvement",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Quality' helps us build better software?",
    "answer": "Pushing quality higher often results in faster delivery; while lowering quality standards often results in later, less predictable delivery.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Redundancy' helps us build better software?",
    "answer": "The cost of the redundancy is more than paid for by the savings from not having the disaster.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Reflection' helps us build better software?",
    "answer": "We expose mistakes to learn from them. No one stumbles into excellence",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the principle of 'Self-Similarity' helps us build better software?",
    "answer": "When we find a solution that works, we uses it everywhere we can.",
    "subject": "XP: Principles"
  },
  {
    "stem": "How does the value of 'Communication' helps us build better software?",
    "answer": "We communicate to create the best solution to our problem that we can together.",
    "subject": "XP: Values"
  },
  {
    "stem": "How does the value of 'Courage' helps us build better software?",
    "answer": "We will tell the truth about progress and estimates. We don't document excuses for failure because we plan to succeed. We don't fear anything because no one ever works alone. We will adapt to changes when ever they happen.",
    "subject": "XP: Values"
  },
  {
    "stem": "How does the value of 'Feedback' helps us build better software?",
    "answer": "Lots of feedback allows for frequent and small course corrections.",
    "subject": "XP: Values"
  },
  {
    "stem": "How does the value of 'Respect' helps us build better software?",
    "answer": "Everyone contributes value even if it's simply enthusiasm. Developers respect the expertise of the customers and vice versa. Management respects our right to accept responsibility and receive authority over our own work.",
    "subject": "XP: Values"
  },
  {
    "stem": "How does the value of 'Simplicity' helps us build better software?",
    "answer": "Maximize the value created for the investment",
    "subject": "XP: Values"
  },
  {
    "stem": "What are some common types of 'Feedback' we have in XP?",
    "answer": "Pair programming, TDD, iteration, retrospectives, demo's, releases.",
    "subject": "XP: Values"
  }
]